// BLYNK APP CONTROL
//#define BLYNK_TEMPLATE_ID "TMPL2oqOzQ2hh"
//#define BLYNK_DEVICE_NAME "IOT BASED DOOR LOCK AND HOME AUTOMATION SYSTEM"
//#define BLYNK_AUTH_TOKEN "Jq_zzRXydR13pkBQNUkRgFown-vkegUK"
// BLYNK APP CONTROL
#define BLYNK_TEMPLATE_ID "TMPL2sB9Fl_wr"
#define BLYNK_TEMPLATE_NAME "IOT BASED DOOR LOCK AND HOME AUTOMATION SYSTEM"
#define BLYNK_AUTH_TOKEN "m3xzBdLijEImI7RwiSkGjSvy4SF2Nbv_"

#define BLYNK_PRINT Serial
#include <WiFi.h>
//#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
//#include <SimpleTimer.h>
#include <DHT.h>

  // LCD DISPLAY LIBRARY
#include <LiquidCrystal_I2C.h> // library for I2C LCD  
LiquidCrystal_I2C lcd(0x27, 16, 2); // set the LCD address to 0x27 for a 16 chars and 2 line display

//lCD Diclarations
//int SDA - Pin G21
//int SCL - Pin G22
// VCC - 5V INPUT SIDE
// GND - GND 
//-----------------------
#define VPIN_BUTTON_1    V2
#define VPIN_BUTTON_2    V3
#define VPIN_BUTTON_3    V4
#define VPIN_BUTTON_4    V7
#define VPIN_BUTTON_5    V8
//-------------
// Flame Sensor declarations
int  LockRelay = 18;   
int  FlamePin = 16; 
bool pinValue = 0;
int  FlameValue = 0;

// Light Relay declarations
int LightRelay = 19;
int LightRelay6 = 33;

//Temperature sensor declarations
// GND - GND ESP32
// VCC + 3.3V ESP32
int DHTPin = 15;          // What digital pin we're connected to
#define Type DHT22    // DHT 11
int FanRelay1 = 5; // is On and Off Switch fan
int FanRelay2 = 17;  // is temperature operated fan switch control
int AIR_Relay5 = 32;
DHT dht(DHTPin, Type);
float humidity;
float tempC;
float tempF;
BlynkTimer timer;

//BLYNK APP AND INTENET CONNECTIONS
char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "Amiin";
char pass[] = "1234567888";

//------------Indicators of the system -------
int greenled_Pin = 14;
int redled_Pin = 12;
int Activebuzzer_Pin = 27;
//-----------------------------------------

void setup()
{
  // output indicators ------
  pinMode(greenled_Pin, OUTPUT);
  pinMode(redled_Pin, OUTPUT);
  pinMode(Activebuzzer_Pin, OUTPUT);
  // Light outputs
  pinMode(LightRelay, OUTPUT); // light output pin
  pinMode(LightRelay6, OUTPUT);
  // flame sensor inputs and outputs
  pinMode(FlamePin, INPUT);
  pinMode(LockRelay,OUTPUT); // pump output pin
  //other important setups
  Serial.begin(9600);
  //temperature fan output
  //--------pinMode(DHTPin, INPUT);-------
  pinMode(FanRelay1,OUTPUT);
  pinMode(FanRelay2,OUTPUT);
  pinMode(AIR_Relay5,OUTPUT);
  //other importants
  Blynk.begin(auth, ssid, pass);
  lcd.begin();
  lcd.backlight();
  lcd.clear();  
  dht.begin();

  lcd.setCursor(0,0);
  lcd.print("IOT DOOR LOCK &");
  lcd.setCursor(0,1);
  lcd.print("HOME AUTOMATION");
  delay(5000);
  lcd.clear();
  
  lcd.setCursor(0,0);
  lcd.print("TEMP=0");

  lcd.setCursor(9,0);
  lcd.print("NAL1=OF");

  lcd.setCursor(0,1);
  lcd.print("LOCK=OF");

  lcd.setCursor(9,1);
  lcd.print("FAN1=OF");
  
  timer.setInterval(1000L, Flame_Sensor);
  timer.setInterval(1000L, DHTSensor2);
}

//----------------------------------- First Function -----------------
void Flame_Sensor() { 
  FlameValue = digitalRead(FlamePin);
  int FlameReal = map(FlameValue, 0, 1, 1, 0);
 Blynk.virtualWrite(V6, FlameReal); //display the moisture percent. 
  if(FlameReal==1) // change this data to 1 and do the magic
  { 
//----------------------------conditions exchanging  
  digitalWrite(greenled_Pin,HIGH);
  digitalWrite(redled_Pin,HIGH);
  digitalWrite(Activebuzzer_Pin,HIGH);  
  delay(1000);
  digitalWrite(redled_Pin,LOW);
  digitalWrite(Activebuzzer_Pin,LOW);  
  delay(1000);

  } 
  else // change data into 0 do nothing
  { 
  digitalWrite(redled_Pin,LOW);
  digitalWrite(Activebuzzer_Pin,LOW);
  digitalWrite(greenled_Pin,HIGH);

  } 

}

//----------------------------------- Second Function -----------------
void DHTSensor2()
{
  //humidity = dht.readHumidity();
  tempC = dht.readTemperature(); // or 
  tempF = dht.readTemperature(true); //for Fahrenheit
  Serial.println(tempC);
  Serial.println(tempF);
  lcd.setCursor(0,0);
  lcd.print("TP=");
  lcd.print(tempC);
  
  if (isnan(tempF) || isnan(tempC)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

if((tempC >= 33) && (tempF >= 91.4))
  {
  Blynk.virtualWrite(V5,HIGH); 
  digitalWrite(FanRelay2,LOW); //if soil moisture sensor provides LOW value send LOW value to relay
  Serial.println(tempC);
  }
  else
  {
  Blynk.virtualWrite(V5,LOW); 
  digitalWrite(FanRelay2,HIGH); //if soil moisture sensor provides HIGH value send HIGH value to relay
  }
  Blynk.virtualWrite(V0, tempC);
  Blynk.virtualWrite(V1, tempF);
}

// -------------- Loop Operations --------------
void loop()
{
  Blynk.run();
  timer.run();
}

// funtion for on and off switches -- light -- lock -- fan

// this is for Light On and Off Switch
BLYNK_WRITE(VPIN_BUTTON_1) {
  int toggleState_1 = param.asInt();
  if(toggleState_1 == 1){
    lcd.setCursor(9,0);
    lcd.print("NAL1=ON");
    digitalWrite(LightRelay, LOW);
  }
  else { 
    lcd.setCursor(9,0);
    lcd.print("NAL1=OF");
    digitalWrite(LightRelay, HIGH);
    
  }
}

// this is for Lock On and Off Switch
BLYNK_WRITE(VPIN_BUTTON_2) {
  int toggleState_2 = param.asInt();
  if(toggleState_2 == 1){
    lcd.setCursor(0,1);
    lcd.print("LOCK=ON");
    digitalWrite(LockRelay, LOW);
  }
  else { 
    lcd.setCursor(0,1);
    lcd.print("LOCK=OF");
    digitalWrite(LockRelay, HIGH);
  }
}

// this is for fan1 On and Off Switch
BLYNK_WRITE(VPIN_BUTTON_3) {
  int toggleState_3 = param.asInt();
  if(toggleState_3 == 1){
    lcd.setCursor(9,1);
    lcd.print("FAN1=ON");
    digitalWrite(FanRelay1, LOW);
  }
  else { 
    lcd.setCursor(9,1);
    lcd.print("FAN1=OF");
    digitalWrite(FanRelay1, HIGH);
  }  
}

// this is for AIR CONDITION On and Off Switch
BLYNK_WRITE(VPIN_BUTTON_4) {
  int toggleState_4 = param.asInt();
  if(toggleState_4 == 1){
    lcd.setCursor(9,1);
    lcd.print("AIRC=ON");
    digitalWrite(AIR_Relay5, LOW);
  }
  else { 
    lcd.setCursor(9,1);
    lcd.print("AIRC=OF");
    digitalWrite(AIR_Relay5, HIGH);
  }  
}

// this is for liGHT 2 On and Off Switch
BLYNK_WRITE(VPIN_BUTTON_5) {
  int toggleState_5 = param.asInt();
  if(toggleState_5 == 1){
    lcd.setCursor(9,0);
    lcd.print("NAL2=ON");
    digitalWrite(LightRelay6, LOW);
  }
  else { 
    lcd.setCursor(9,0);
    lcd.print("NAL2=OF");
    digitalWrite(LightRelay6, HIGH);
    
  }
}